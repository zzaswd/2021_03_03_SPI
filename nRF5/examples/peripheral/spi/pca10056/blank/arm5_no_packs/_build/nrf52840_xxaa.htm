<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\_build\nrf52840_xxaa.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\_build\nrf52840_xxaa.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Tue Mar 09 16:47:32 2021
<BR><P>
<H3>Maximum Stack Usage =        888 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; AD5940_Main &rArr; AppAMPInit &rArr; AppAMPRtiaCal &rArr; AD5940_LPRtiaCal &rArr; AD5940_ComplexPhase &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">NMI_Handler</a><BR>
 <LI><a href="#[3]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">HardFault_Handler</a><BR>
 <LI><a href="#[4]">MemoryManagement_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">MemoryManagement_Handler</a><BR>
 <LI><a href="#[5]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">BusFault_Handler</a><BR>
 <LI><a href="#[6]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">UsageFault_Handler</a><BR>
 <LI><a href="#[7]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">SVC_Handler</a><BR>
 <LI><a href="#[8]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">DebugMon_Handler</a><BR>
 <LI><a href="#[9]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">PendSV_Handler</a><BR>
 <LI><a href="#[a]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">SysTick_Handler</a><BR>
 <LI><a href="#[1a]">CCM_AAR_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">CCM_AAR_IRQHandler</a><BR>
 <LI><a href="#[e6]">nrf_log_frontend_dequeue</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e7]">nrf_log_frontend_std_0</a><BR>
 <LI><a href="#[79]">AD5940_ClksCalculate</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[79]">AD5940_ClksCalculate</a><BR>
 <LI><a href="#[78]">AD5940_Delay10us</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">AD5940_Delay10us</a><BR>
 <LI><a href="#[b1]">AppAMPCtrl</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b1]">AppAMPCtrl</a><BR>
 <LI><a href="#[f9]">buffer_add</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f9]">buffer_add</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[5]">BusFault_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[1a]">CCM_AAR_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[1e]">COMP_LPCOMP_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[33]">CRYPTOCELL_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[8]">DebugMon_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[19]">ECB_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[2f]">FPU_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[11]">GPIOTE_IRQHandler</a> from nrfx_gpiote.o(i.GPIOTE_IRQHandler) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[3]">HardFault_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[2e]">I2S_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[29]">MWU_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[4]">MemoryManagement_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[10]">NFCT_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[2]">NMI_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[28]">PDM_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[b]">POWER_CLOCK_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[27]">PWM0_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[2a]">PWM1_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[2b]">PWM2_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[34]">PWM3_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[1d]">QDEC_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[32]">QSPI_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[c]">RADIO_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[18]">RNG_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[16]">RTC0_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[1c]">RTC1_IRQHandler</a> from drv_rtc.o(i.RTC1_IRQHandler) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[2d]">RTC2_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[1]">Reset_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[12]">SAADC_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[e]">SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</a> from nrfx_spim.o(i.SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler) referenced from nrfx_spim.o(.constdata)
 <LI><a href="#[e]">SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</a> from nrfx_spim.o(i.SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[f]">SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[2c]">SPIM2_SPIS2_SPI2_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[35]">SPIM3_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[7]">SVC_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[1f]">SWI0_EGU0_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[20]">SWI1_EGU1_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[21]">SWI2_EGU2_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[22]">SWI3_EGU3_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[23]">SWI4_EGU4_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[24]">SWI5_EGU5_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[37]">SystemInit</a> from system_nrf52840.o(i.SystemInit) referenced from arm_startup_nrf52840.o(.text)
 <LI><a href="#[17]">TEMP_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[13]">TIMER0_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[14]">TIMER1_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[15]">TIMER2_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[25]">TIMER3_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[26]">TIMER4_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[d]">UARTE0_UART0_IRQHandler</a> from nrfx_prs.o(i.UARTE0_UART0_IRQHandler) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[31]">UARTE1_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[30]">USBD_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[6]">UsageFault_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[1b]">WDT_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[38]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from arm_startup_nrf52840.o(.text)
 <LI><a href="#[3a]">fputc</a> from fputc.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[36]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[44]">nrf_log_backend_uart_flush</a> from nrf_log_backend_uart.o(i.nrf_log_backend_uart_flush) referenced from nrf_log_backend_uart.o(.constdata)
 <LI><a href="#[43]">nrf_log_backend_uart_panic_set</a> from nrf_log_backend_uart.o(i.nrf_log_backend_uart_panic_set) referenced from nrf_log_backend_uart.o(.constdata)
 <LI><a href="#[42]">nrf_log_backend_uart_put</a> from nrf_log_backend_uart.o(i.nrf_log_backend_uart_put) referenced from nrf_log_backend_uart.o(.constdata)
 <LI><a href="#[40]">nrfx_uart_0_irq_handler</a> from nrfx_uart.o(i.nrfx_uart_0_irq_handler) referenced from nrfx_uart.o(.constdata)
 <LI><a href="#[41]">nrfx_uarte_0_irq_handler</a> from nrfx_uarte.o(i.nrfx_uarte_0_irq_handler) referenced from nrfx_uarte.o(.constdata)
 <LI><a href="#[3e]">serial_tx</a> from nrf_log_backend_uart.o(i.serial_tx) referenced from nrf_log_backend_uart.o(i.nrf_log_backend_uart_put)
 <LI><a href="#[39]">spi_event_handler</a> from adicup3029port.o(i.spi_event_handler) referenced from adicup3029port.o(i.AD5940_MCUResourceInit)
 <LI><a href="#[3b]">spim_evt_handler</a> from nrf_drv_spi.o(i.spim_evt_handler) referenced from nrf_drv_spi.o(i.nrf_drv_spi_init)
 <LI><a href="#[3d]">uart_evt_handler</a> from nrf_drv_uart.o(i.uart_evt_handler) referenced from nrf_drv_uart.o(i.nrf_drv_uart_init)
 <LI><a href="#[3f]">uart_evt_handler</a> from nrf_log_backend_uart.o(i.uart_evt_handler) referenced from nrf_log_backend_uart.o(i.uart_init)
 <LI><a href="#[3c]">uarte_evt_handler</a> from nrf_drv_uart.o(i.uarte_evt_handler) referenced from nrf_drv_uart.o(i.nrf_drv_uart_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[38]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(.text)
</UL>
<P><STRONG><a name="[152]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[45]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[5c]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[153]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[154]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[155]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[156]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[157]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[158]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[10c]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_mov</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_store
</UL>

<P><STRONG><a name="[10d]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_orr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_or
</UL>

<P><STRONG><a name="[10b]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_and</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_and
</UL>

<P><STRONG><a name="[159]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_eor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[10a]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_add</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_add
</UL>

<P><STRONG><a name="[10f]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_sub</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_sub
</UL>

<P><STRONG><a name="[15a]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_cmp_exch</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[15b]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_sub_hs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[1]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>MemoryManagement_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>CCM_AAR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>COMP_LPCOMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>CRYPTOCELL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>ECB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>MWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>NFCT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>PDM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>POWER_CLOCK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>PWM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>PWM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>QDEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>QSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>RADIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>RTC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>RTC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>SAADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>SPIM2_SPIS2_SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>SPIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SWI0_EGU0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>SWI1_EGU1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>SWI2_EGU2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>SWI3_EGU3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>SWI4_EGU4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>SWI5_EGU5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TEMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>UARTE1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USBD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[49]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WGFreqWordCal
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[15c]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[134]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
</UL>

<P><STRONG><a name="[105]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_hexdump
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memobj_op
</UL>

<P><STRONG><a name="[7a]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Initialize
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ClksCalculate
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[15d]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[4b]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
</UL>

<P><STRONG><a name="[15e]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[15f]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[4a]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_StructInit
</UL>

<P><STRONG><a name="[c4]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPCtrl
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[160]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[4c]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[118]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_event_handler
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>

<P><STRONG><a name="[4d]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[51]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[52]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[53]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[54]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[55]"></a>__aeabi_l2f</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ffltl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_l2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WGFreqWordCal
</UL>

<P><STRONG><a name="[57]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
</UL>

<P><STRONG><a name="[6a]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPShowResult
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940PlatformCfg
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ComplexPhase
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ComplexMag
</UL>

<P><STRONG><a name="[58]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ComplexPhase
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ComplexMag
</UL>

<P><STRONG><a name="[161]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[e3]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[48]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[162]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[4e]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[163]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[164]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[59]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[56]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2f
</UL>

<P><STRONG><a name="[50]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[4f]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[5a]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>

<P><STRONG><a name="[5b]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[dd]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[165]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[e0]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[46]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[166]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[167]"></a>__I$use$semihosting$fputc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, iusesemip.o(.text), UNUSED)

<P><STRONG><a name="[168]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[169]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[16a]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, semi.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>AD5940AMPStructInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, ad5940main.o(i.AD5940AMPStructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AD5940AMPStructInit
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPGetCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main
</UL>

<P><STRONG><a name="[6c]"></a>AD5940_ADCBaseCfgS</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ad5940.o(i.AD5940_ADCBaseCfgS))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = AD5940_ADCBaseCfgS &rArr; AD5940_WriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; nrfx_spim_xfer &rArr; spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_DSPCfgS
</UL>

<P><STRONG><a name="[6e]"></a>AD5940_ADCDigCompCfgS</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_ADCDigCompCfgS))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = AD5940_ADCDigCompCfgS &rArr; AD5940_WriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; nrfx_spim_xfer &rArr; spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_DSPCfgS
</UL>

<P><STRONG><a name="[6f]"></a>AD5940_ADCFilterCfgS</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_ADCFilterCfgS))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = AD5940_ADCFilterCfgS &rArr; AD5940_AFECtrlS &rArr; AD5940_ReadReg &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; nrfx_spim_xfer &rArr; spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AFECtrlS
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_DSPCfgS
</UL>

<P><STRONG><a name="[71]"></a>AD5940_AFECtrlS</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_AFECtrlS))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = AD5940_AFECtrlS &rArr; AD5940_ReadReg &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; nrfx_spim_xfer &rArr; spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPSeqMeasureGen
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPSeqCfgGen
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ADCFilterCfgS
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__AD5940_TakeMeasurement
</UL>

<P><STRONG><a name="[72]"></a>AD5940_AFEPwrBW</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ad5940.o(i.AD5940_AFEPwrBW))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = AD5940_AFEPwrBW &rArr; AD5940_WriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; nrfx_spim_xfer &rArr; spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPInit
</UL>

<P><STRONG><a name="[67]"></a>AD5940_AGPIOCfg</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_AGPIOCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = AD5940_AGPIOCfg &rArr; AD5940_WriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; nrfx_spim_xfer &rArr; spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AGPIOPen
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AGPIOOen
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AGPIOIen
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AGPIOFuncCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940PlatformCfg
</UL>

<P><STRONG><a name="[73]"></a>AD5940_AGPIOFuncCfg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ad5940.o(i.AD5940_AGPIOFuncCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = AD5940_AGPIOFuncCfg &rArr; AD5940_WriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; nrfx_spim_xfer &rArr; spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AGPIOCfg
</UL>

<P><STRONG><a name="[75]"></a>AD5940_AGPIOIen</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ad5940.o(i.AD5940_AGPIOIen))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = AD5940_AGPIOIen &rArr; AD5940_WriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; nrfx_spim_xfer &rArr; spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AGPIOCfg
</UL>

<P><STRONG><a name="[74]"></a>AD5940_AGPIOOen</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ad5940.o(i.AD5940_AGPIOOen))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = AD5940_AGPIOOen &rArr; AD5940_WriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; nrfx_spim_xfer &rArr; spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AGPIOCfg
</UL>

<P><STRONG><a name="[76]"></a>AD5940_AGPIOPen</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ad5940.o(i.AD5940_AGPIOPen))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = AD5940_AGPIOPen &rArr; AD5940_WriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; nrfx_spim_xfer &rArr; spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AGPIOCfg
</UL>

<P><STRONG><a name="[62]"></a>AD5940_CLKCfg</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, ad5940.o(i.AD5940_CLKCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = AD5940_CLKCfg &rArr; AD5940_HFOSC32MHzCtrl &rArr; AD5940_ReadReg &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; nrfx_spim_xfer &rArr; spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Delay10us
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_HFOSC32MHzCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940PlatformCfg
</UL>

<P><STRONG><a name="[79]"></a>AD5940_ClksCalculate</STRONG> (Thumb, 366 bytes, Stack size 136 bytes, ad5940.o(i.AD5940_ClksCalculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + In Cycle
<LI>Call Chain = AD5940_ClksCalculate &rArr;  AD5940_ClksCalculate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Notch60HzAvailable
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Notch50HzAvailable
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ClksCalculate
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPSeqMeasureGen
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ClksCalculate
</UL>

<P><STRONG><a name="[c9]"></a>AD5940_ClrMCUIntFlag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, adicup3029port.o(i.AD5940_ClrMCUIntFlag))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPInit
</UL>

<P><STRONG><a name="[ab]"></a>AD5940_ComplexDivInt</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, ad5940.o(i.AD5940_ComplexDivInt))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
</UL>

<P><STRONG><a name="[7d]"></a>AD5940_ComplexMag</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_ComplexMag))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AD5940_ComplexMag &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
</UL>

<P><STRONG><a name="[7f]"></a>AD5940_ComplexPhase</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_ComplexPhase))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = AD5940_ComplexPhase &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
</UL>

<P><STRONG><a name="[81]"></a>AD5940_CsClr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, adicup3029port.o(i.AD5940_CsClr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AD5940_CsClr &rArr; nrf_gpio_pin_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_FIFORd
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SPIReadReg
</UL>

<P><STRONG><a name="[83]"></a>AD5940_CsSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, adicup3029port.o(i.AD5940_CsSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AD5940_CsSet &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Initialize
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_FIFORd
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SPIReadReg
</UL>

<P><STRONG><a name="[85]"></a>AD5940_DFTCfgS</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_DFTCfgS))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = AD5940_DFTCfgS &rArr; AD5940_ReadReg &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; nrfx_spim_xfer &rArr; spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_DSPCfgS
</UL>

<P><STRONG><a name="[86]"></a>AD5940_DSPCfgS</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_DSPCfgS))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = AD5940_DSPCfgS &rArr; AD5940_ADCFilterCfgS &rArr; AD5940_AFECtrlS &rArr; AD5940_ReadReg &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; nrfx_spim_xfer &rArr; spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_StatisticCfgS
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_DFTCfgS
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ADCFilterCfgS
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ADCDigCompCfgS
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ADCBaseCfgS
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPSeqCfgGen
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
</UL>

<P><STRONG><a name="[78]"></a>AD5940_Delay10us</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, adicup3029port.o(i.AD5940_Delay10us))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = AD5940_Delay10us &rArr;  AD5940_Delay10us (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Delay10us
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Delay10us
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_HWReset
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_CLKCfg
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__AD5940_TakeMeasurement
</UL>

<P><STRONG><a name="[88]"></a>AD5940_EnterSleepS</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_EnterSleepS))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = AD5940_EnterSleepS &rArr; AD5940_WriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; nrfx_spim_xfer &rArr; spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPSeqMeasureGen
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPCtrl
</UL>

<P><STRONG><a name="[63]"></a>AD5940_FIFOCfg</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_FIFOCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = AD5940_FIFOCfg &rArr; AD5940_ReadReg &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; nrfx_spim_xfer &rArr; spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPInit
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940PlatformCfg
</UL>

<P><STRONG><a name="[89]"></a>AD5940_FIFOCtrlS</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ad5940.o(i.AD5940_FIFOCtrlS))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = AD5940_FIFOCtrlS &rArr; AD5940_WriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; nrfx_spim_xfer &rArr; spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPInit
</UL>

<P><STRONG><a name="[8a]"></a>AD5940_FIFOGetCnt</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_FIFOGetCnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = AD5940_FIFOGetCnt &rArr; AD5940_ReadReg &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; nrfx_spim_xfer &rArr; spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPISR
</UL>

<P><STRONG><a name="[8b]"></a>AD5940_FIFORd</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_FIFORd))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = AD5940_FIFORd &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; nrfx_spim_xfer &rArr; spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_CsSet
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_CsClr
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadWrite8B
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadWrite32B
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadWrite16B
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPISR
</UL>

<P><STRONG><a name="[b2]"></a>AD5940_GetMCUIntFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, adicup3029port.o(i.AD5940_GetMCUIntFlag))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main
</UL>

<P><STRONG><a name="[77]"></a>AD5940_HFOSC32MHzCtrl</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, ad5940.o(i.AD5940_HFOSC32MHzCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = AD5940_HFOSC32MHzCtrl &rArr; AD5940_ReadReg &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; nrfx_spim_xfer &rArr; spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_CLKCfg
</UL>

<P><STRONG><a name="[8f]"></a>AD5940_HSDacCfgS</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ad5940.o(i.AD5940_HSDacCfgS))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = AD5940_HSDacCfgS &rArr; AD5940_WriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; nrfx_spim_xfer &rArr; spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_HSLoopCfgS
</UL>

<P><STRONG><a name="[90]"></a>AD5940_HSLoopCfgS</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_HSLoopCfgS))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = AD5940_HSLoopCfgS &rArr; AD5940_HSTIACfgS &rArr; AD5940_WriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; nrfx_spim_xfer &rArr; spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WGCfgS
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SWMatrixCfgS
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_HSTIACfgS
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_HSDacCfgS
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
</UL>

<P><STRONG><a name="[91]"></a>AD5940_HSTIACfgS</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, ad5940.o(i.AD5940_HSTIACfgS))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = AD5940_HSTIACfgS &rArr; AD5940_WriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; nrfx_spim_xfer &rArr; spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_HSLoopCfgS
</UL>

<P><STRONG><a name="[60]"></a>AD5940_HWReset</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_HWReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AD5940_HWReset &rArr; AD5940_RstSet &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_RstSet
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_RstClr
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Delay10us
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940PlatformCfg
</UL>

<P><STRONG><a name="[65]"></a>AD5940_INTCCfg</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_INTCCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = AD5940_INTCCfg &rArr; AD5940_ReadReg &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; nrfx_spim_xfer &rArr; spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940PlatformCfg
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LFOSCMeasure
</UL>

<P><STRONG><a name="[66]"></a>AD5940_INTCClrFlag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ad5940.o(i.AD5940_INTCClrFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = AD5940_INTCClrFlag &rArr; AD5940_WriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; nrfx_spim_xfer &rArr; spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPInit
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPISR
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940PlatformCfg
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LFOSCMeasure
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__AD5940_TakeMeasurement
</UL>

<P><STRONG><a name="[96]"></a>AD5940_INTCGetCfg</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ad5940.o(i.AD5940_INTCGetCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = AD5940_INTCGetCfg &rArr; AD5940_ReadReg &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; nrfx_spim_xfer &rArr; spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LFOSCMeasure
</UL>

<P><STRONG><a name="[97]"></a>AD5940_INTCTestFlag</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_INTCTestFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = AD5940_INTCTestFlag &rArr; AD5940_ReadReg &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; nrfx_spim_xfer &rArr; spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPInit
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPISR
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LFOSCMeasure
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__AD5940_TakeMeasurement
</UL>

<P><STRONG><a name="[61]"></a>AD5940_Initialize</STRONG> (Thumb, 100 bytes, Stack size 128 bytes, ad5940.o(i.AD5940_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = AD5940_Initialize &rArr; AD5940_ReadReg &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; nrfx_spim_xfer &rArr; spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_CsSet
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940PlatformCfg
</UL>

<P><STRONG><a name="[69]"></a>AD5940_LFOSCMeasure</STRONG> (Thumb, 386 bytes, Stack size 152 bytes, ad5940.o(i.AD5940_LFOSCMeasure))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = AD5940_LFOSCMeasure &rArr; AD5940_SEQInfoCfg &rArr; AD5940_SEQCmdWrite &rArr; AD5940_WriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; nrfx_spim_xfer &rArr; spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WUPTTime
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WUPTCtrl
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WUPTCfg
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQTimeOutRd
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQInfoCfg
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGetCfg
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQCtrlS
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQCfg
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCTestFlag
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCGetCfg
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCClrFlag
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940PlatformCfg
</UL>

<P><STRONG><a name="[9f]"></a>AD5940_LPAMPCfgS</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_LPAMPCfgS))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = AD5940_LPAMPCfgS &rArr; AD5940_WriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; nrfx_spim_xfer &rArr; spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPLoopCfgS
</UL>

<P><STRONG><a name="[a0]"></a>AD5940_LPDAC0WriteS</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ad5940.o(i.AD5940_LPDAC0WriteS))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = AD5940_LPDAC0WriteS &rArr; AD5940_WriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; nrfx_spim_xfer &rArr; spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPDACCfgS
</UL>

<P><STRONG><a name="[a1]"></a>AD5940_LPDAC1WriteS</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ad5940.o(i.AD5940_LPDAC1WriteS))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = AD5940_LPDAC1WriteS &rArr; AD5940_WriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; nrfx_spim_xfer &rArr; spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPDACCfgS
</UL>

<P><STRONG><a name="[a2]"></a>AD5940_LPDACCfgS</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_LPDACCfgS))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = AD5940_LPDACCfgS &rArr; AD5940_WriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; nrfx_spim_xfer &rArr; spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPDAC1WriteS
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPDAC0WriteS
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPLoopCfgS
</UL>

<P><STRONG><a name="[a3]"></a>AD5940_LPLoopCfgS</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_LPLoopCfgS))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = AD5940_LPLoopCfgS &rArr; AD5940_LPDACCfgS &rArr; AD5940_WriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; nrfx_spim_xfer &rArr; spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPDACCfgS
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPAMPCfgS
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPSeqCfgGen
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPCtrl
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
</UL>

<P><STRONG><a name="[a4]"></a>AD5940_LPRtiaCal</STRONG> (Thumb, 1580 bytes, Stack size 488 bytes, ad5940.o(i.AD5940_LPRtiaCal))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = AD5940_LPRtiaCal &rArr; AD5940_ComplexPhase &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Delay10us
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WGFreqWordCal
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WGDACCodeS
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_StructInit
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SWMatrixCfgS
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadAfeResult
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPLoopCfgS
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCTestFlag
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCGetCfg
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCClrFlag
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCCfg
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_HSLoopCfgS
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_DSPCfgS
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ComplexPhase
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ComplexMag
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ComplexDivInt
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AFECtrlS
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ADCBaseCfgS
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__AD5940_TakeMeasurement
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__AD5940_ReferenceON
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPRtiaCal
</UL>

<P><STRONG><a name="[ac]"></a>AD5940_MCUResourceInit</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, adicup3029port.o(i.AD5940_MCUResourceInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = AD5940_MCUResourceInit &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[af]"></a>AD5940_Main</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ad5940main.o(i.AD5940_Main))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = AD5940_Main &rArr; AppAMPInit &rArr; AppAMPRtiaCal &rArr; AD5940_LPRtiaCal &rArr; AD5940_ComplexPhase &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_GetMCUIntFlag
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPInit
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPISR
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPCtrl
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPShowResult
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940AMPStructInit
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940PlatformCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7b]"></a>AD5940_Notch50HzAvailable</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, ad5940.o(i.AD5940_Notch50HzAvailable))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = AD5940_Notch50HzAvailable &rArr; _is_value_in_table
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_value_in_table
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ClksCalculate
</UL>

<P><STRONG><a name="[7c]"></a>AD5940_Notch60HzAvailable</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, ad5940.o(i.AD5940_Notch60HzAvailable))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = AD5940_Notch60HzAvailable &rArr; _is_value_in_table
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_value_in_table
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ClksCalculate
</UL>

<P><STRONG><a name="[b6]"></a>AD5940_REFCfgS</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_REFCfgS))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = AD5940_REFCfgS &rArr; AD5940_ReadReg &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; nrfx_spim_xfer &rArr; spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPSeqCfgGen
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPCtrl
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__AD5940_ReferenceON
</UL>

<P><STRONG><a name="[aa]"></a>AD5940_ReadAfeResult</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, ad5940.o(i.AD5940_ReadAfeResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = AD5940_ReadAfeResult &rArr; AD5940_ReadReg &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; nrfx_spim_xfer &rArr; spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__AD5940_TakeMeasurement
</UL>

<P><STRONG><a name="[70]"></a>AD5940_ReadReg</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = AD5940_ReadReg &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; nrfx_spim_xfer &rArr; spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SPIReadReg
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQRegInfoInsert
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGenSearchReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPCtrl
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WakeUp
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WUPTCtrl
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQTimeOutRd
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGetCfg
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQCtrlS
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQCfg
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadAfeResult
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_REFCfgS
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Initialize
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCTestFlag
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCGetCfg
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCCfg
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_HFOSC32MHzCtrl
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_FIFOGetCnt
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_FIFOCfg
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_DFTCfgS
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_CLKCfg
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AFECtrlS
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ADCFilterCfgS
</UL>

<P><STRONG><a name="[ba]"></a>AD5940_ReadWriteNBytes</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, adicup3029port.o(i.AD5940_ReadWriteNBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = AD5940_ReadWriteNBytes &rArr; nrfx_spim_xfer &rArr; spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadWrite8B
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadWrite32B
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadWrite16B
</UL>

<P><STRONG><a name="[94]"></a>AD5940_RstClr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, adicup3029port.o(i.AD5940_RstClr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AD5940_RstClr &rArr; nrf_gpio_pin_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_HWReset
</UL>

<P><STRONG><a name="[95]"></a>AD5940_RstSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, adicup3029port.o(i.AD5940_RstSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AD5940_RstSet &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_HWReset
</UL>

<P><STRONG><a name="[64]"></a>AD5940_SEQCfg</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, ad5940.o(i.AD5940_SEQCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = AD5940_SEQCfg &rArr; AD5940_ReadReg &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; nrfx_spim_xfer &rArr; spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPInit
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940PlatformCfg
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LFOSCMeasure
</UL>

<P><STRONG><a name="[bc]"></a>AD5940_SEQCmdWrite</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, ad5940.o(i.AD5940_SEQCmdWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = AD5940_SEQCmdWrite &rArr; AD5940_WriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; nrfx_spim_xfer &rArr; spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPSeqMeasureGen
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPSeqCfgGen
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQInfoCfg
</UL>

<P><STRONG><a name="[9e]"></a>AD5940_SEQCtrlS</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_SEQCtrlS))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = AD5940_SEQCtrlS &rArr; AD5940_ReadReg &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; nrfx_spim_xfer &rArr; spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPInit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LFOSCMeasure
</UL>

<P><STRONG><a name="[ca]"></a>AD5940_SEQGenCtrl</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ad5940.o(i.AD5940_SEQGenCtrl))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPSeqMeasureGen
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPSeqCfgGen
</UL>

<P><STRONG><a name="[cb]"></a>AD5940_SEQGenFetchSeq</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ad5940.o(i.AD5940_SEQGenFetchSeq))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPSeqMeasureGen
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPSeqCfgGen
</UL>

<P><STRONG><a name="[c6]"></a>AD5940_SEQGenInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ad5940.o(i.AD5940_SEQGenInit))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPInit
</UL>

<P><STRONG><a name="[c0]"></a>AD5940_SEQGenInsert</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_SEQGenInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AD5940_SEQGenInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPSeqMeasureGen
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPSeqCfgGen
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQWriteReg
</UL>

<P><STRONG><a name="[98]"></a>AD5940_SEQGetCfg</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_SEQGetCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = AD5940_SEQGetCfg &rArr; AD5940_ReadReg &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; nrfx_spim_xfer &rArr; spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LFOSCMeasure
</UL>

<P><STRONG><a name="[bd]"></a>AD5940_SEQGpioCtrlS</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ad5940.o(i.AD5940_SEQGpioCtrlS))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = AD5940_SEQGpioCtrlS &rArr; AD5940_WriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; nrfx_spim_xfer &rArr; spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPSeqMeasureGen
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPSeqCfgGen
</UL>

<P><STRONG><a name="[99]"></a>AD5940_SEQInfoCfg</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_SEQInfoCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = AD5940_SEQInfoCfg &rArr; AD5940_SEQCmdWrite &rArr; AD5940_WriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; nrfx_spim_xfer &rArr; spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQCmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPInit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LFOSCMeasure
</UL>

<P><STRONG><a name="[be]"></a>AD5940_SEQMmrTrig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ad5940.o(i.AD5940_SEQMmrTrig))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = AD5940_SEQMmrTrig &rArr; AD5940_WriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; nrfx_spim_xfer &rArr; spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPInit
</UL>

<P><STRONG><a name="[9c]"></a>AD5940_SEQTimeOutRd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ad5940.o(i.AD5940_SEQTimeOutRd))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = AD5940_SEQTimeOutRd &rArr; AD5940_ReadReg &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; nrfx_spim_xfer &rArr; spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LFOSCMeasure
</UL>

<P><STRONG><a name="[92]"></a>AD5940_SWMatrixCfgS</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_SWMatrixCfgS))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = AD5940_SWMatrixCfgS &rArr; AD5940_WriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; nrfx_spim_xfer &rArr; spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPSeqCfgGen
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_HSLoopCfgS
</UL>

<P><STRONG><a name="[68]"></a>AD5940_SleepKeyCtrlS</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ad5940.o(i.AD5940_SleepKeyCtrlS))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = AD5940_SleepKeyCtrlS &rArr; AD5940_WriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; nrfx_spim_xfer &rArr; spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPISR
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940PlatformCfg
</UL>

<P><STRONG><a name="[87]"></a>AD5940_StatisticCfgS</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ad5940.o(i.AD5940_StatisticCfgS))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = AD5940_StatisticCfgS &rArr; AD5940_WriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; nrfx_spim_xfer &rArr; spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_DSPCfgS
</UL>

<P><STRONG><a name="[a6]"></a>AD5940_StructInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ad5940.o(i.AD5940_StructInit))
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPRtiaCal
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
</UL>

<P><STRONG><a name="[93]"></a>AD5940_WGCfgS</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_WGCfgS))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = AD5940_WGCfgS &rArr; AD5940_WriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; nrfx_spim_xfer &rArr; spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_HSLoopCfgS
</UL>

<P><STRONG><a name="[a7]"></a>AD5940_WGDACCodeS</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_WGDACCodeS))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = AD5940_WGDACCodeS &rArr; AD5940_WriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; nrfx_spim_xfer &rArr; spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
</UL>

<P><STRONG><a name="[a9]"></a>AD5940_WGFreqWordCal</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_WGFreqWordCal))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = AD5940_WGFreqWordCal &rArr; __aeabi_l2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2f
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
</UL>

<P><STRONG><a name="[9a]"></a>AD5940_WUPTCfg</STRONG> (Thumb, 340 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_WUPTCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = AD5940_WUPTCfg &rArr; AD5940_WriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; nrfx_spim_xfer &rArr; spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPCtrl
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LFOSCMeasure
</UL>

<P><STRONG><a name="[9b]"></a>AD5940_WUPTCtrl</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_WUPTCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = AD5940_WUPTCtrl &rArr; AD5940_ReadReg &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; nrfx_spim_xfer &rArr; spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPISR
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPCtrl
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LFOSCMeasure
</UL>

<P><STRONG><a name="[9d]"></a>AD5940_WUPTTime</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_WUPTTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = AD5940_WUPTTime &rArr; AD5940_WriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; nrfx_spim_xfer &rArr; spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LFOSCMeasure
</UL>

<P><STRONG><a name="[c1]"></a>AD5940_WakeUp</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, ad5940.o(i.AD5940_WakeUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = AD5940_WakeUp &rArr; AD5940_ReadReg &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; nrfx_spim_xfer &rArr; spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPInit
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPISR
</UL>

<P><STRONG><a name="[6d]"></a>AD5940_WriteReg</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = AD5940_WriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; nrfx_spim_xfer &rArr; spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_CsSet
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_CsClr
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQWriteReg
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadWrite8B
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadWrite32B
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadWrite16B
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WUPTTime
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WUPTCtrl
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WUPTCfg
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WGDACCodeS
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WGCfgS
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_StatisticCfgS
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SleepKeyCtrlS
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SWMatrixCfgS
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQMmrTrig
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQInfoCfg
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGpioCtrlS
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQCtrlS
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQCmdWrite
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQCfg
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_REFCfgS
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPDACCfgS
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPDAC1WriteS
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPDAC0WriteS
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPAMPCfgS
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Initialize
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCClrFlag
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCCfg
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_HSTIACfgS
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_HSDacCfgS
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_HFOSC32MHzCtrl
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_FIFOCtrlS
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_FIFOCfg
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_EnterSleepS
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_DFTCfgS
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_CLKCfg
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AGPIOPen
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AGPIOOen
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AGPIOIen
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AGPIOFuncCfg
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AGPIOCfg
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AFEPwrBW
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AFECtrlS
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ADCFilterCfgS
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ADCDigCompCfgS
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ADCBaseCfgS
</UL>

<P><STRONG><a name="[b4]"></a>AMPShowResult</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ad5940main.o(i.AMPShowResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AMPShowResult &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main
</UL>

<P><STRONG><a name="[c2]"></a>AppAMPCalcCurrent</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, amperometric.o(i.AppAMPCalcCurrent))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = AppAMPCalcCurrent
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPCalcVoltage
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPISR
</UL>

<P><STRONG><a name="[c3]"></a>AppAMPCalcVoltage</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, amperometric.o(i.AppAMPCalcVoltage))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPCalcCurrent
</UL>

<P><STRONG><a name="[b1]"></a>AppAMPCtrl</STRONG> (Thumb, 170 bytes, Stack size 96 bytes, amperometric.o(i.AppAMPCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + In Cycle
<LI>Call Chain = AppAMPCtrl &rArr;  AppAMPCtrl (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPCtrl
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WUPTCtrl
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WUPTCfg
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_REFCfgS
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPLoopCfgS
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_EnterSleepS
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPCtrl
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main
</UL>

<P><STRONG><a name="[5e]"></a>AppAMPGetCfg</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, amperometric.o(i.AppAMPGetCfg))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940AMPStructInit
</UL>

<P><STRONG><a name="[b3]"></a>AppAMPISR</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, amperometric.o(i.AppAMPISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = AppAMPISR &rArr; AD5940_WakeUp &rArr; AD5940_ReadReg &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; nrfx_spim_xfer &rArr; spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPCalcCurrent
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WakeUp
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WUPTCtrl
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SleepKeyCtrlS
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCTestFlag
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCClrFlag
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_FIFORd
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_FIFOGetCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main
</UL>

<P><STRONG><a name="[b0]"></a>AppAMPInit</STRONG> (Thumb, 272 bytes, Stack size 56 bytes, amperometric.o(i.AppAMPInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = AppAMPInit &rArr; AppAMPRtiaCal &rArr; AD5940_LPRtiaCal &rArr; AD5940_ComplexPhase &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ClrMCUIntFlag
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPSeqMeasureGen
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPSeqCfgGen
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPRtiaCal
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WakeUp
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQMmrTrig
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQInfoCfg
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGenInit
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQCtrlS
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQCfg
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCTestFlag
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCClrFlag
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_FIFOCtrlS
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_FIFOCfg
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AFEPwrBW
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main
</UL>

<P><STRONG><a name="[11]"></a>GPIOTE_IRQHandler</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, nrfx_gpiote.o(i.GPIOTE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = GPIOTE_IRQHandler &rArr; port_event_handle &rArr; nrf_gpio_latches_read_and_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_event_handle
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_is_set
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_latches_read_and_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>RTC1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, drv_rtc.o(i.RTC1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, nrfx_spim.o(i.SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_event_check
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Address Reference Count : 2]<UL><LI> nrfx_spim.o(.constdata)
<LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>SystemInit</STRONG> (Thumb, 406 bytes, Stack size 16 bytes, system_nrf52840.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(.text)
</UL>
<P><STRONG><a name="[d]"></a>UARTE0_UART0_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_prs.o(i.UARTE0_UART0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[d3]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[16b]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[6b]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPShowResult
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940PlatformCfg
</UL>

<P><STRONG><a name="[16c]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[16d]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[d7]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[d5]"></a>__hardfp_atan</STRONG> (Thumb, 622 bytes, Stack size 48 bytes, atan.o(i.__hardfp_atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[80]"></a>__hardfp_atan2</STRONG> (Thumb, 448 bytes, Stack size 56 bytes, atan2.o(i.__hardfp_atan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ComplexPhase
</UL>

<P><STRONG><a name="[7e]"></a>__hardfp_sqrt</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, sqrt.o(i.__hardfp_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ComplexMag
</UL>

<P><STRONG><a name="[da]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[d6]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[db]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[d8]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[16e]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[16f]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[170]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[de]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[e4]"></a>app_error_fault_handler</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, app_error_weak.o(i.app_error_fault_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_panic
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>

<P><STRONG><a name="[ae]"></a>app_error_handler_bare</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, app_error.o(i.app_error_handler_bare))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_MCUResourceInit
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx
</UL>

<P><STRONG><a name="[e8]"></a>app_util_critical_region_enter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_util_platform.o(i.app_util_critical_region_enter))
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_disable_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>

<P><STRONG><a name="[ea]"></a>app_util_critical_region_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_util_platform.o(i.app_util_critical_region_exit))
<BR><BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_enable_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>

<P><STRONG><a name="[e9]"></a>app_util_disable_irq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_util_platform.o(i.app_util_disable_irq))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>

<P><STRONG><a name="[eb]"></a>app_util_enable_irq</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_util_platform.o(i.app_util_enable_irq))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
</UL>

<P><STRONG><a name="[dc]"></a>atan</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, atan.o(i.atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[f4]"></a>bsp_board_led_invert</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, boards.o(i.bsp_board_led_invert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsp_board_led_invert
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12e]"></a>buffer_is_empty</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.buffer_is_empty))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
</UL>

<P><STRONG><a name="[d9]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[3a]"></a>fputc</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, fputc.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[36]"></a>main</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = main &rArr; AD5940_Main &rArr; AppAMPInit &rArr; AppAMPRtiaCal &rArr; AD5940_LPRtiaCal &rArr; AD5940_ComplexPhase &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_xfer
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_MCUResourceInit
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_invert
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[103]"></a>nrf_atomic_flag_clear_fetch</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_atomic.o(i.nrf_atomic_flag_clear_fetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_flag_clear_fetch &rArr; nrf_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_and
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_skip
</UL>

<P><STRONG><a name="[101]"></a>nrf_atomic_flag_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_atomic.o(i.nrf_atomic_flag_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_flag_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_or
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_skip
</UL>

<P><STRONG><a name="[f7]"></a>nrf_atomic_u32_add</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_atomic.o(i.nrf_atomic_u32_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_u32_add
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_add
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_get
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>

<P><STRONG><a name="[108]"></a>nrf_atomic_u32_fetch_and</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrf_atomic.o(i.nrf_atomic_u32_fetch_and))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_and
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_clear_fetch
</UL>

<P><STRONG><a name="[fc]"></a>nrf_atomic_u32_fetch_store</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrf_atomic.o(i.nrf_atomic_u32_fetch_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_u32_fetch_store
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_mov
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dropped_sat16_get
</UL>

<P><STRONG><a name="[109]"></a>nrf_atomic_u32_or</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_atomic.o(i.nrf_atomic_u32_or))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_orr
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set
</UL>

<P><STRONG><a name="[10e]"></a>nrf_atomic_u32_sub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_atomic.o(i.nrf_atomic_u32_sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_u32_sub
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_sub
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
</UL>

<P><STRONG><a name="[110]"></a>nrf_balloc_alloc</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, nrf_balloc.o(i.nrf_balloc_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_balloc_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_alloc
</UL>

<P><STRONG><a name="[111]"></a>nrf_balloc_free</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, nrf_balloc.o(i.nrf_balloc_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_balloc_free
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_free
</UL>

<P><STRONG><a name="[ad]"></a>nrf_drv_spi_init</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, nrf_drv_spi.o(i.nrf_drv_spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = nrf_drv_spi_init &rArr; nrfx_spim_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_MCUResourceInit
</UL>

<P><STRONG><a name="[113]"></a>nrf_drv_uart_init</STRONG> (Thumb, 90 bytes, Stack size 56 bytes, nrf_drv_uart.o(i.nrf_drv_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = nrf_drv_uart_init &rArr; nrfx_uarte_init &rArr; apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[116]"></a>nrf_fprintf</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, nrf_fprintf.o(i.nrf_fprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postfix_process
</UL>

<P><STRONG><a name="[fa]"></a>nrf_fprintf_buffer_flush</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nrf_fprintf.o(i.nrf_fprintf_buffer_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_fprintf_buffer_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postfix_process
</UL>

<P><STRONG><a name="[117]"></a>nrf_fprintf_fmt</STRONG> (Thumb, 474 bytes, Stack size 40 bytes, nrf_fprintf_format.o(i.nrf_fprintf_fmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned_print
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_print
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_buffer_flush
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
</UL>

<P><STRONG><a name="[125]"></a>nrf_log_backend_serial_put</STRONG> (Thumb, 194 bytes, Stack size 104 bytes, nrf_log_backend_serial.o(i.nrf_log_backend_serial_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = nrf_log_backend_serial_put &rArr; nrf_log_std_entry_process &rArr; prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_read
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_get
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_uart_put
</UL>

<P><STRONG><a name="[14a]"></a>nrf_log_color_id_get</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.nrf_log_color_id_get))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
</UL>

<P><STRONG><a name="[e6]"></a>nrf_log_frontend_dequeue</STRONG> (Thumb, 518 bytes, Stack size 48 bytes, nrf_log_frontend.o(i.nrf_log_frontend_dequeue))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + In Cycle
<LI>Call Chain = nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_write
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_alloc
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_is_empty
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalid_packets_omit
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_hexdump
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>

<P><STRONG><a name="[131]"></a>nrf_log_frontend_hexdump</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, nrf_log_frontend.o(i.nrf_log_frontend_hexdump))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = nrf_log_frontend_hexdump &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dropped_sat16_get
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_event_handler
</UL>

<P><STRONG><a name="[e7]"></a>nrf_log_frontend_std_0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_event_handler
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>

<P><STRONG><a name="[129]"></a>nrf_log_hexdump_entry_process</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, nrf_log_str_formatter.o(i.nrf_log_hexdump_entry_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = nrf_log_hexdump_entry_process &rArr; prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postfix_process
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[107]"></a>nrf_log_module_cnt_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.nrf_log_module_cnt_get))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_idx_get
</UL>

<P><STRONG><a name="[136]"></a>nrf_log_module_name_get</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.nrf_log_module_name_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrf_log_module_name_get &rArr; module_idx_get
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_idx_get
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
</UL>

<P><STRONG><a name="[e5]"></a>nrf_log_panic</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.nrf_log_panic))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_log_panic
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>

<P><STRONG><a name="[128]"></a>nrf_log_std_entry_process</STRONG> (Thumb, 182 bytes, Stack size 48 bytes, nrf_log_str_formatter.o(i.nrf_log_std_entry_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = nrf_log_std_entry_process &rArr; prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postfix_process
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[12f]"></a>nrf_memobj_alloc</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, nrf_memobj.o(i.nrf_memobj_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_free
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
</UL>

<P><STRONG><a name="[137]"></a>nrf_memobj_free</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, nrf_memobj.o(i.nrf_memobj_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_memobj_free &rArr; nrf_balloc_free
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_alloc
</UL>

<P><STRONG><a name="[126]"></a>nrf_memobj_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_memobj.o(i.nrf_memobj_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_memobj_get &rArr; nrf_atomic_u32_add
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_add
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[12a]"></a>nrf_memobj_put</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, nrf_memobj.o(i.nrf_memobj_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_memobj_put &rArr; nrf_memobj_free &rArr; nrf_balloc_free
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_free
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_sub
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[127]"></a>nrf_memobj_read</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, nrf_memobj.o(i.nrf_memobj_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_memobj_read &rArr; memobj_op
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memobj_op
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[130]"></a>nrf_memobj_write</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, nrf_memobj.o(i.nrf_memobj_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_memobj_write &rArr; memobj_op
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memobj_op
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
</UL>

<P><STRONG><a name="[138]"></a>nrfx_prs_acquire</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, nrfx_prs.o(i.nrfx_prs_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrfx_prs_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prs_box_get
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_init
</UL>

<P><STRONG><a name="[13a]"></a>nrfx_prs_release</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, nrfx_prs.o(i.nrfx_prs_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrfx_prs_release
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prs_box_get
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_uninit
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_uninit
</UL>

<P><STRONG><a name="[112]"></a>nrfx_spim_init</STRONG> (Thumb, 356 bytes, Stack size 40 bytes, nrfx_spim.o(i.nrfx_spim_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = nrfx_spim_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
</UL>

<P><STRONG><a name="[bb]"></a>nrfx_spim_xfer</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, nrfx_spim.o(i.nrfx_spim_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrfx_spim_xfer &rArr; spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadWriteNBytes
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[40]"></a>nrfx_uart_0_irq_handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrfx_uart_0_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nrfx_uart_0_irq_handler &rArr; uart_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_uart.o(.constdata)
</UL>
<P><STRONG><a name="[115]"></a>nrfx_uart_init</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, nrfx_uart.o(i.nrfx_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = nrfx_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
</UL>

<P><STRONG><a name="[13e]"></a>nrfx_uart_tx</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, nrfx_uart.o(i.nrfx_uart_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrfx_uart_tx &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx_in_progress
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx
</UL>

<P><STRONG><a name="[13f]"></a>nrfx_uart_tx_in_progress</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrfx_uart_tx_in_progress))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
</UL>

<P><STRONG><a name="[12c]"></a>nrfx_uart_uninit</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, nrfx_uart.o(i.nrfx_uart_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = nrfx_uart_uninit &rArr; nrf_gpio_cfg_default &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_default
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_release
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_uart_panic_set
</UL>

<P><STRONG><a name="[41]"></a>nrfx_uarte_0_irq_handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrfx_uarte_0_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrfx_uarte_0_irq_handler &rArr; uarte_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_uarte.o(.constdata)
</UL>
<P><STRONG><a name="[114]"></a>nrfx_uarte_init</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, nrfx_uarte.o(i.nrfx_uarte_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = nrfx_uarte_init &rArr; apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_enable
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
</UL>

<P><STRONG><a name="[143]"></a>nrfx_uarte_tx</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, nrfx_uarte.o(i.nrfx_uarte_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrfx_uarte_tx &rArr; nrf_uarte_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx_in_progress
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_is_in_ram
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_clear
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx
</UL>

<P><STRONG><a name="[145]"></a>nrfx_uarte_tx_in_progress</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrfx_uarte_tx_in_progress))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx
</UL>

<P><STRONG><a name="[12b]"></a>nrfx_uarte_uninit</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, nrfx_uarte.o(i.nrfx_uarte_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = nrfx_uarte_uninit &rArr; nrf_gpio_cfg_default &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_release
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_clear
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_check
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_default
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_uart_panic_set
</UL>

<P><STRONG><a name="[39]"></a>spi_event_handler</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, adicup3029port.o(i.spi_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = spi_event_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_hexdump
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adicup3029port.o(i.AD5940_MCUResourceInit)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[82]"></a>nrf_gpio_pin_clear</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, adicup3029port.o(i.nrf_gpio_pin_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gpio_pin_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_RstClr
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_CsClr
</UL>

<P><STRONG><a name="[124]"></a>nrf_gpio_pin_port_decode</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, adicup3029port.o(i.nrf_gpio_pin_port_decode))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>

<P><STRONG><a name="[84]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, adicup3029port.o(i.nrf_gpio_pin_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_RstSet
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_CsSet
</UL>

<P><STRONG><a name="[8d]"></a>AD5940_ReadWrite16B</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_ReadWrite16B))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = AD5940_ReadWrite16B &rArr; AD5940_ReadWriteNBytes &rArr; nrfx_spim_xfer &rArr; spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadWriteNBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_FIFORd
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SPIReadReg
</UL>

<P><STRONG><a name="[8e]"></a>AD5940_ReadWrite32B</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_ReadWrite32B))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = AD5940_ReadWrite32B &rArr; AD5940_ReadWriteNBytes &rArr; nrfx_spim_xfer &rArr; spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadWriteNBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_FIFORd
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SPIReadReg
</UL>

<P><STRONG><a name="[8c]"></a>AD5940_ReadWrite8B</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_ReadWrite8B))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; nrfx_spim_xfer &rArr; spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadWriteNBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_FIFORd
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SPIReadReg
</UL>

<P><STRONG><a name="[b8]"></a>AD5940_SEQGenSearchReg</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, ad5940.o(i.AD5940_SEQGenSearchReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = AD5940_SEQGenSearchReg
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQWriteReg
</UL>

<P><STRONG><a name="[b9]"></a>AD5940_SEQRegInfoInsert</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_SEQRegInfoInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AD5940_SEQRegInfoInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQWriteReg
</UL>

<P><STRONG><a name="[bf]"></a>AD5940_SEQWriteReg</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ad5940.o(i.AD5940_SEQWriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = AD5940_SEQWriteReg &rArr; AD5940_SEQGenSearchReg
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGenInsert
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQRegInfoInsert
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGenSearchReg
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>

<P><STRONG><a name="[b7]"></a>AD5940_SPIReadReg</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_SPIReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; nrfx_spim_xfer &rArr; spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_CsSet
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_CsClr
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadWrite8B
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadWrite32B
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadWrite16B
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
</UL>

<P><STRONG><a name="[a5]"></a>__AD5940_ReferenceON</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, ad5940.o(i.__AD5940_ReferenceON))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = __AD5940_ReferenceON &rArr; AD5940_REFCfgS &rArr; AD5940_ReadReg &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; nrfx_spim_xfer &rArr; spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_REFCfgS
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
</UL>

<P><STRONG><a name="[a8]"></a>__AD5940_TakeMeasurement</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ad5940.o(i.__AD5940_TakeMeasurement))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __AD5940_TakeMeasurement &rArr; AD5940_AFECtrlS &rArr; AD5940_ReadReg &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; nrfx_spim_xfer &rArr; spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Delay10us
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadAfeResult
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCTestFlag
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCClrFlag
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AFECtrlS
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
</UL>

<P><STRONG><a name="[b5]"></a>_is_value_in_table</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, ad5940.o(i._is_value_in_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _is_value_in_table
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Notch60HzAvailable
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Notch50HzAvailable
</UL>

<P><STRONG><a name="[5f]"></a>AD5940PlatformCfg</STRONG> (Thumb, 214 bytes, Stack size 96 bytes, ad5940main.o(i.AD5940PlatformCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = AD5940PlatformCfg &rArr; AD5940_LFOSCMeasure &rArr; AD5940_SEQInfoCfg &rArr; AD5940_SEQCmdWrite &rArr; AD5940_WriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; nrfx_spim_xfer &rArr; spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SleepKeyCtrlS
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQCfg
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LFOSCMeasure
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Initialize
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCClrFlag
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCCfg
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_HWReset
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_FIFOCfg
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_CLKCfg
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AGPIOCfg
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main
</UL>

<P><STRONG><a name="[c5]"></a>AppAMPRtiaCal</STRONG> (Thumb, 126 bytes, Stack size 72 bytes, amperometric.o(i.AppAMPRtiaCal))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = AppAMPRtiaCal &rArr; AD5940_LPRtiaCal &rArr; AD5940_ComplexPhase &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_StructInit
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPInit
</UL>

<P><STRONG><a name="[c7]"></a>AppAMPSeqCfgGen</STRONG> (Thumb, 378 bytes, Stack size 184 bytes, amperometric.o(i.AppAMPSeqCfgGen))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = AppAMPSeqCfgGen &rArr; AD5940_DSPCfgS &rArr; AD5940_ADCFilterCfgS &rArr; AD5940_AFECtrlS &rArr; AD5940_ReadReg &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; nrfx_spim_xfer &rArr; spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SWMatrixCfgS
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGpioCtrlS
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGenInsert
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGenFetchSeq
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGenCtrl
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQCmdWrite
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_REFCfgS
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPLoopCfgS
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_DSPCfgS
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AFECtrlS
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPInit
</UL>

<P><STRONG><a name="[c8]"></a>AppAMPSeqMeasureGen</STRONG> (Thumb, 176 bytes, Stack size 64 bytes, amperometric.o(i.AppAMPSeqMeasureGen))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = AppAMPSeqMeasureGen &rArr; AD5940_ClksCalculate &rArr;  AD5940_ClksCalculate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGpioCtrlS
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGenInsert
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGenFetchSeq
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGenCtrl
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQCmdWrite
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_EnterSleepS
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ClksCalculate
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AFECtrlS
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPInit
</UL>

<P><STRONG><a name="[f5]"></a>nrf_gpio_pin_port_decode</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, boards.o(i.nrf_gpio_pin_port_decode))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_invert
</UL>

<P><STRONG><a name="[3b]"></a>spim_evt_handler</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, nrf_drv_spi.o(i.spim_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = spim_evt_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_spi.o(i.nrf_drv_spi_init)
</UL>
<P><STRONG><a name="[3d]"></a>uart_evt_handler</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nrf_drv_uart.o(i.uart_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart_evt_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_uart.o(i.nrf_drv_uart_init)
</UL>
<P><STRONG><a name="[3c]"></a>uarte_evt_handler</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nrf_drv_uart.o(i.uarte_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uarte_evt_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_uart.o(i.nrf_drv_uart_init)
</UL>
<P><STRONG><a name="[149]"></a>channel_port_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.channel_port_get))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_event_handle
</UL>

<P><STRONG><a name="[147]"></a>nrf_bitmask_bit_is_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.nrf_bitmask_bit_is_set))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_event_handle
</UL>

<P><STRONG><a name="[122]"></a>nrf_gpio_cfg_sense_set</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, nrfx_gpiote.o(i.nrf_gpio_cfg_sense_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_cfg_sense_set
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_event_handle
</UL>

<P><STRONG><a name="[ce]"></a>nrf_gpio_latches_read_and_clear</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, nrfx_gpiote.o(i.nrf_gpio_latches_read_and_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_gpio_latches_read_and_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_event_handle
</UL>

<P><STRONG><a name="[123]"></a>nrf_gpio_pin_port_decode</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.nrf_gpio_pin_port_decode))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_event_handle
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
</UL>

<P><STRONG><a name="[cd]"></a>nrf_gpiote_event_clear</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrfx_gpiote.o(i.nrf_gpiote_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gpiote_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[cc]"></a>nrf_gpiote_event_is_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.nrf_gpiote_event_is_set))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[cf]"></a>port_event_handle</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, nrfx_gpiote.o(i.port_event_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = port_event_handle &rArr; nrf_gpio_latches_read_and_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_handler_polarity_get
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_latches_read_and_clear
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_bitmask_bit_is_set
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[148]"></a>port_handler_polarity_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.port_handler_polarity_get))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_event_handle
</UL>

<P><STRONG><a name="[139]"></a>prs_box_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrfx_prs.o(i.prs_box_get))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_release
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
</UL>

<P><STRONG><a name="[119]"></a>nrf_gpio_cfg</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, nrfx_spim.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
</UL>

<P><STRONG><a name="[121]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, nrfx_spim.o(i.nrf_gpio_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_init
</UL>

<P><STRONG><a name="[d1]"></a>nrf_gpio_pin_clear</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nrfx_spim.o(i.nrf_gpio_pin_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gpio_pin_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_xfer
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
</UL>

<P><STRONG><a name="[11a]"></a>nrf_gpio_pin_port_decode</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrfx_spim.o(i.nrf_gpio_pin_port_decode))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>

<P><STRONG><a name="[d2]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nrfx_spim.o(i.nrf_gpio_pin_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_xfer
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
</UL>

<P><STRONG><a name="[d0]"></a>nrf_spim_event_check</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_spim.o(i.nrf_spim_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
</UL>

<P><STRONG><a name="[14c]"></a>nrfx_is_in_ram</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrfx_spim.o(i.nrfx_is_in_ram))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
</UL>

<P><STRONG><a name="[13b]"></a>spim_xfer</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, nrfx_spim.o(i.spim_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_is_in_ram
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_event_check
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_xfer
</UL>

<P><STRONG><a name="[ec]"></a>apply_config</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, nrfx_uart.o(i.apply_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_init
</UL>

<P><STRONG><a name="[11b]"></a>nrf_gpio_cfg</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, nrfx_uart.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_default
</UL>

<P><STRONG><a name="[11f]"></a>nrf_gpio_cfg_default</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, nrfx_uart.o(i.nrf_gpio_cfg_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrf_gpio_cfg_default &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_uninit
</UL>

<P><STRONG><a name="[ef]"></a>nrf_gpio_cfg_input</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, nrfx_uart.o(i.nrf_gpio_cfg_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[ee]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, nrfx_uart.o(i.nrf_gpio_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[11c]"></a>nrf_gpio_pin_port_decode</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrf_gpio_pin_port_decode))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>

<P><STRONG><a name="[ed]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nrfx_uart.o(i.nrf_gpio_pin_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[141]"></a>nrf_uart_event_check</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrf_uart_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[13d]"></a>nrf_uart_event_clear</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrfx_uart.o(i.nrf_uart_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_byte
</UL>

<P><STRONG><a name="[14d]"></a>nrf_uart_int_enable_check</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrf_uart_int_enable_check))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[14b]"></a>rx_byte</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, nrfx_uart.o(i.rx_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[14e]"></a>rx_done_event</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrfx_uart.o(i.rx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[140]"></a>tx_byte</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, nrfx_uart.o(i.tx_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[14f]"></a>tx_done_event</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, nrfx_uart.o(i.tx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[13c]"></a>uart_irq_handler</STRONG> (Thumb, 298 bytes, Stack size 48 bytes, nrfx_uart.o(i.uart_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = uart_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_done_event
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_done_event
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_byte
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_int_enable_check
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_0_irq_handler
</UL>

<P><STRONG><a name="[f0]"></a>apply_config</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, nrfx_uarte.o(i.apply_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_init
</UL>

<P><STRONG><a name="[ff]"></a>interrupts_enable</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, nrfx_uarte.o(i.interrupts_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = interrupts_enable &rArr; nrf_uarte_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_init
</UL>

<P><STRONG><a name="[11d]"></a>nrf_gpio_cfg</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, nrfx_uarte.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_default
</UL>

<P><STRONG><a name="[120]"></a>nrf_gpio_cfg_default</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, nrfx_uarte.o(i.nrf_gpio_cfg_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrf_gpio_cfg_default &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_uninit
</UL>

<P><STRONG><a name="[f3]"></a>nrf_gpio_cfg_input</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, nrfx_uarte.o(i.nrf_gpio_cfg_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[f2]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, nrfx_uarte.o(i.nrf_gpio_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[11e]"></a>nrf_gpio_pin_port_decode</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrf_gpio_pin_port_decode))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>

<P><STRONG><a name="[f1]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nrfx_uarte.o(i.nrf_gpio_pin_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[146]"></a>nrf_uarte_event_check</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrf_uarte_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_uninit
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
</UL>

<P><STRONG><a name="[100]"></a>nrf_uarte_event_clear</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrfx_uarte.o(i.nrf_uarte_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_uarte_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_uninit
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_enable
</UL>

<P><STRONG><a name="[144]"></a>nrfx_is_in_ram</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrfx_is_in_ram))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx
</UL>

<P><STRONG><a name="[150]"></a>rx_done_event</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrfx_uarte.o(i.rx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
</UL>

<P><STRONG><a name="[151]"></a>tx_done_event</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, nrfx_uarte.o(i.tx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
</UL>

<P><STRONG><a name="[142]"></a>uarte_irq_handler</STRONG> (Thumb, 274 bytes, Stack size 40 bytes, nrfx_uarte.o(i.uarte_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = uarte_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_done_event
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_done_event
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_clear
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_0_irq_handler
</UL>

<P><STRONG><a name="[f9]"></a>buffer_add</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, nrf_fprintf_format.o(i.buffer_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_buffer_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned_print
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_print
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>

<P><STRONG><a name="[fd]"></a>int_print</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, nrf_fprintf_format.o(i.int_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned_print
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>

<P><STRONG><a name="[fe]"></a>unsigned_print</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, nrf_fprintf_format.o(i.unsigned_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_print
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>

<P><STRONG><a name="[104]"></a>memobj_op</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, nrf_memobj.o(i.memobj_op))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = memobj_op
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_write
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_read
</UL>

<P><STRONG><a name="[44]"></a>nrf_log_backend_uart_flush</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nrf_log_backend_uart.o(i.nrf_log_backend_uart_flush))
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_uart.o(.constdata)
</UL>
<P><STRONG><a name="[43]"></a>nrf_log_backend_uart_panic_set</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, nrf_log_backend_uart.o(i.nrf_log_backend_uart_panic_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = nrf_log_backend_uart_panic_set &rArr; uart_init &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_uninit
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_uninit
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_uart.o(.constdata)
</UL>
<P><STRONG><a name="[42]"></a>nrf_log_backend_uart_put</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrf_log_backend_uart.o(i.nrf_log_backend_uart_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = nrf_log_backend_uart_put &rArr; nrf_log_backend_serial_put &rArr; nrf_log_std_entry_process &rArr; prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_uart.o(.constdata)
</UL>
<P><STRONG><a name="[3e]"></a>serial_tx</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, nrf_log_backend_uart.o(i.serial_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = serial_tx &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_uart.o(i.nrf_log_backend_uart_put)
</UL>
<P><STRONG><a name="[3f]"></a>uart_evt_handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_log_backend_uart.o(i.uart_evt_handler))
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_uart.o(i.uart_init)
</UL>
<P><STRONG><a name="[12d]"></a>uart_init</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, nrf_log_backend_uart.o(i.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = uart_init &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_uart_panic_set
</UL>

<P><STRONG><a name="[f6]"></a>buf_prealloc</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, nrf_log_frontend.o(i.buf_prealloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = buf_prealloc &rArr; log_skip &rArr; nrf_atomic_flag_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_add
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_skip
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_hexdump
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>

<P><STRONG><a name="[fb]"></a>dropped_sat16_get</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrf_log_frontend.o(i.dropped_sat16_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dropped_sat16_get &rArr; nrf_atomic_u32_fetch_store
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_store
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_hexdump
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>

<P><STRONG><a name="[102]"></a>invalid_packets_omit</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.invalid_packets_omit))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_skip
</UL>

<P><STRONG><a name="[f8]"></a>log_skip</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, nrf_log_frontend.o(i.log_skip))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = log_skip &rArr; nrf_atomic_flag_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_clear_fetch
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalid_packets_omit
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>

<P><STRONG><a name="[106]"></a>module_idx_get</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, nrf_log_frontend.o(i.module_idx_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = module_idx_get
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_cnt_get
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_name_get
</UL>

<P><STRONG><a name="[132]"></a>std_n</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, nrf_log_frontend.o(i.std_n))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dropped_sat16_get
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
</UL>

<P><STRONG><a name="[135]"></a>postfix_process</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, nrf_log_str_formatter.o(i.postfix_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = postfix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_buffer_flush
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
</UL>

<P><STRONG><a name="[133]"></a>prefix_process</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, nrf_log_str_formatter.o(i.prefix_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_name_get
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_color_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
</UL>

<P><STRONG><a name="[df]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[d4]"></a>_printf_core</STRONG> (Thumb, 1704 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[e2]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[e1]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
